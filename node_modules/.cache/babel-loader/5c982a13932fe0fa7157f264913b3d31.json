{"ast":null,"code":"var _jsxFileName = \"/Users/MIAlien/Desktop/OpenWeather/weatherapp/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport WeatherCard from './components/WeatherCard';\nimport Form from './components/Form';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./weather-icons/css/weather-icons.css\";\nconst API_Key = '0ff895f1354b494c95ab7dfadda2a141';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.getWeather = async e => {\n      e.preventDefault(); // get values from city and country - User input will select the city name\n\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value;\n\n      if (country && city) {\n        const api_call = await fetch(\"http://api.openweathermap.org/data/2.5/weather?q=\".concat(city, \",\").concat(country, \"&units=imperial&appid=\").concat(API_Key));\n        const response = await api_call.json();\n        this.setState({\n          city: \"\".concat(response.name, \", \").concat(response.sys.country),\n          country: response.sys.country,\n          main: response.weather[0].main,\n          temp: response.main.temp,\n          description: response.weather[0].description,\n          error: false\n        }); // // seting icons\n\n        this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n        console.log(response);\n      } else {\n        this.setState({\n          error: true\n        });\n      }\n    };\n\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      ferenheit: undefined,\n      description: \"\",\n      error: false\n    }; //  weather icons depending on the weather\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  } //check weather and specify that icon to the state\n\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({\n          icon: icons.Thunderstorm\n        });\n        break;\n\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({\n          icon: icons.Drizzle\n        });\n        break;\n\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({\n          icon: icons.Rain\n        });\n        break;\n\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({\n          icon: icons.Snow\n        });\n        break;\n\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({\n          icon: icons.Atmosphere\n        });\n        break;\n\n      case rangeId === 800:\n        this.setState({\n          icon: icons.Clear\n        });\n        break;\n\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({\n          icon: icons.Clouds\n        });\n        break;\n\n      default:\n        this.setState({\n          icon: icons.Clouds\n        });\n    }\n  } // calculate celsius\n  // calCelsius(temp) {\n  //   let cell = Math.floor(temp - 273.15);\n  //   return cell;\n  // }\n  // event handler for submit button in form component\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(Form, {\n      loadweather: this.getWeather,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(WeatherCard, {\n      cityname: this.state.city,\n      weatherIcon: this.state.icon,\n      temp: this.state.temp,\n      description: this.state.description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/MIAlien/Desktop/OpenWeather/weatherapp/src/App.js"],"names":["React","Header","WeatherCard","Form","API_Key","App","Component","constructor","getWeather","e","preventDefault","city","target","elements","value","country","api_call","fetch","response","json","setState","name","sys","main","weather","temp","description","error","get_WeatherIcon","weatherIcon","id","console","log","state","undefined","icon","ferenheit","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeId","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport WeatherCard from './components/WeatherCard';\nimport Form from './components/Form';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./weather-icons/css/weather-icons.css\";\n\nconst API_Key = '0ff895f1354b494c95ab7dfadda2a141';\n\nclass App extends React.Component{\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      ferenheit: undefined,\n      description: \"\",\n      error: false\n    };\n \n  //  weather icons depending on the weather\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n  \n  //check weather and specify that icon to the state\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: icons.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds });\n    }\n  }\n\n  // calculate celsius\n  // calCelsius(temp) {\n  //   let cell = Math.floor(temp - 273.15);\n  //   return cell;\n  // }\n\n  // event handler for submit button in form component\n  getWeather = async e => {\n    e.preventDefault();\n\n    // get values from city and country - User input will select the city name\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    if(country && city) {\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=imperial&appid=${API_Key}`);\n\n    const response = await api_call.json();\n\n    this.setState({\n      city: `${response.name}, ${response.sys.country}`,\n      country: response.sys.country,\n      main: response.weather[0].main,\n      temp: response.main.temp,\n      description: response.weather[0].description,\n      error: false\n    });\n\n    // // seting icons\n    this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n \n    console.log(response);\n  } else {\n    this.setState({\n      error: true\n    });\n  }\n};\n\n   \nrender() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Form loadweather={this.getWeather} error={this.state.error} />\n      <WeatherCard\n        cityname={this.state.city}\n        weatherIcon={this.state.icon}\n        temp={this.state.temp}\n        description={this.state.description}\n      />\n    </div>\n  );\n}\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}